package kunstvoorwerpentest;

import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.junit.jupiter.api.Test;

import kunstvoorwerpen.Artifact;
import kunstvoorwerpen.RadixArtifact;

public class RadixArtifactTest {

  @Test
  public void radixSortTest() {
    
      //ongesorteerde lijst
      ArrayList<Artifact> lijst = new ArrayList<>();
      lijst.add(new Artifact(4,4,4));
      lijst.add(new Artifact(2,2,11));
      lijst.add(new Artifact(0,0,9));
      lijst.add(new Artifact(1,1,9));
      lijst.add(new Artifact(3,3,5));
      
      
      Artifact a0 = lijst.get(0);
      Artifact a1 = lijst.get(1);
      Artifact a2 = lijst.get(2);
      Artifact a3 = lijst.get(3);
      Artifact a4 = lijst.get(4);
      
      //ongesorteerd
      assertTrue(4.0 == a0.getPrice());
      assertTrue(4.0 == a0.getValue());
      
      assertTrue(2.0 == a1.getPrice());
      assertTrue(11.0 == a1.getValue());
      
      assertTrue(0.0 == a2.getPrice());
      assertTrue(9.0 == a2.getValue());
      
      assertTrue(1.0 == a3.getPrice());
      assertTrue(9.0 == a3.getValue());
          
      assertTrue(3.0 == a4.getPrice());
      assertTrue(5.0 == a4.getValue());
      
      //sort list op basis van prijs eerst en waarde prijs laag hoog en dan waarde hoog laag
      RadixArtifact.radixSort(lijst, true, true);
      RadixArtifact.radixSort(lijst, false, false); 
      
      //verwacht  [(0, 9), (1, 9), (2, 11), (3, 5), (4, 4)];
      a0 = lijst.get(0);
      a1 = lijst.get(1);
      a2 = lijst.get(2);
      a3 = lijst.get(3);
      a4 = lijst.get(4);
      
      assertTrue(0 == a0.getPrice());
      assertTrue(9.0 == a0.getValue());
      
      assertTrue(1.0 == a1.getPrice());
      assertTrue(9.0 == a1.getValue());
      
      assertTrue(2.0 == a2.getPrice());
      assertTrue(11.0 == a2.getValue());
      
      assertTrue(3.0 == a3.getPrice());
      assertTrue(5.0 == a3.getValue());
          
      assertTrue(4.0 == a4.getPrice());
      assertTrue(4.0 == a4.getValue());
      
      //sorteer de lijst op basis van value en dan prijs waarde hoog laag en dan prijs laag hoog
      RadixArtifact.radixSort(lijst, false, false); 
      RadixArtifact.radixSort(lijst, true, true);
      
      //verwacht [(2, 11), (0, 9), (1, 9), (3, 5), (4, 4)]
      a0 = lijst.get(0);
      a1 = lijst.get(1);
      a2 = lijst.get(2);
      a3 = lijst.get(3);
      a4 = lijst.get(4);
      
      assertTrue(2.0 == a0.getPrice());
      assertTrue(11.0 == a0.getValue());
      
      assertTrue(0 == a1.getPrice());
      assertTrue(9.0 == a1.getValue());
      
      assertTrue(1.0 == a2.getPrice());
      assertTrue(9.0 == a2.getValue());
      
      assertTrue(3.0 == a3.getPrice());
      assertTrue(5.0 == a3.getValue());
          
      assertTrue(4.0 == a4.getPrice());
      assertTrue(4.0 == a4.getValue());
      
  }

}
