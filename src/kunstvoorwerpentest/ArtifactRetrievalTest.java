package kunstvoorwerpentest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertIterableEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import kunstvoorwerpen.Artifact;
import kunstvoorwerpen.ArtifactOrdering;
import kunstvoorwerpen.ArtifactRetrievalNLogNComplexity;
import kunstvoorwerpen.ArtifactRetrievalQuadraticComplexity;


/**
 *  Test klasse.
 */
public class ArtifactRetrievalTest {

	    
	    private final ArtifactOrdering artifactRetrievalQuadraticComplexity;
	    private final ArtifactOrdering artifactRetrievalNLogNComplexity;
	 
	 
	    private ArtifactRetrievalTest() {
	    	this.artifactRetrievalQuadraticComplexity= new ArtifactRetrievalQuadraticComplexity();
	    	this.artifactRetrievalNLogNComplexity= new ArtifactRetrievalNLogNComplexity();
	    }

	    private static Set<Artifact> createArtifactsShort(){
	    	String solutionsString = 
	    	      "0,0,9;"
	    	    + "1,1,10;"
	    	    + "2,2,11;"
	    	    + "3,3,5;"
	    	    + "4,4,4";
			Set<Artifact >artifactsShort = Artifact.createArtifactsFromArtifactsString(solutionsString);
			return artifactsShort;			
	    }
	    
	    private static Set<Artifact> createExpectedUnbeatedArtifactsShort(){
	    	Set<Artifact> expectedUnbeatedArtifactsShort = new HashSet<>();
	    	expectedUnbeatedArtifactsShort.add(new Artifact(1, 1, 10));
	    	expectedUnbeatedArtifactsShort.add(new Artifact(2, 2, 11));
	    	expectedUnbeatedArtifactsShort.add(new Artifact(0, 0, 9));
	    	return expectedUnbeatedArtifactsShort;	    	
	    }
	    
	    private static List<Artifact> createExpectedScoreOrderedArtifacts(){	    	
	    	List<Artifact> expectedScoreOrderedAtifacts = new ArrayList<>();
	    	expectedScoreOrderedAtifacts.add(new Artifact(2, 2, 11));
	    	expectedScoreOrderedAtifacts.add(new Artifact(1, 1, 10));
	    	expectedScoreOrderedAtifacts.add(new Artifact(0, 0, 9));
	    	expectedScoreOrderedAtifacts.add(new Artifact(3, 3, 5));
	    	expectedScoreOrderedAtifacts.add(new Artifact(4, 4, 4));
	    	return expectedScoreOrderedAtifacts;
	    	
	    }
	    
	    /**
	     * Setup voor iedre test
	     */
	    @BeforeEach
	    public void setup() {
	    }

	    /**
	     * Tests UnbeatedArtifacts in QuadraticComplexity
	     */
	    @Test
	    public void testSimpleGetUnbeatedArtifactsQuadraticComplexity() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	Set<Artifact> unbeatedArtifacts = artifactRetrievalQuadraticComplexity.getUnbeatedArtifacts(artifactsShort);
	    	Set<Artifact> expectedUnbeatedArtifacts = createExpectedUnbeatedArtifactsShort();
	    	assertIterableEquals(expectedUnbeatedArtifacts, unbeatedArtifacts);	
	    }
	    
	    /**
         * Tests UnbeatedArtifacts in NLogNComplexity
         */
	    @Test
	    public void testSimpleGetUnbeatedArtifactsNLogNComplexity() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	Set<Artifact> unbeatedArtifacts = artifactRetrievalNLogNComplexity.getUnbeatedArtifacts(artifactsShort);
	    	Set<Artifact> expectedUnbeatedArtifacts = createExpectedUnbeatedArtifactsShort();
	    	assertIterableEquals(expectedUnbeatedArtifacts, unbeatedArtifacts);
	    }
	    
	    /**
         * Tests SimpleGetScoreOrderedArtiacts in NLogNComplexity
         */
	    @Test
	    public void testSimpleGetScoreOrderedArtiacts() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	SortedSet<Artifact> scoreOrderedArtifacts = artifactRetrievalNLogNComplexity.getScoreOrderedArtiacts(artifactsShort, 1, 10);
	    	List<Artifact> expextedScoreOrderedArtifacts = createExpectedScoreOrderedArtifacts();
	    	assertIterableEquals(expextedScoreOrderedArtifacts, scoreOrderedArtifacts);
	    }


	    // Er wordt aanbevolen om meer tests toe te voegen om andere scenario's 
	    // en randgevallen te testen 
	    
	    /**
	     * Test de dominates methode
	     */
	    @Test 
	    public void dominatesTest() {
          
          Artifact a0 = new Artifact(0,0,6);  //niet overtroffen
          Artifact a1 = new Artifact(1,1,5);  //overtroffen
          Artifact a2 = new Artifact(2,1,6);  //overtroffen
          Artifact a3 = new Artifact(3,2,5);  //overtroffen
          Artifact a4 = new Artifact(4,3,3);  //overtroffen
          Artifact a5 = new Artifact(5,3,5);  //overtroffen
          Artifact a6 = new Artifact(6,5,12); //niet overtroffen
          Artifact a7 = new Artifact(7,2,7);  //niet overtroffen
          Artifact a8 = new Artifact(8,8,20); //niet overtroffen
          Artifact a9 = new Artifact(9,4,4);  //overtroffen
          
          //verwacht overtroffen
          assertTrue(Artifact.dominates(a1,a0));
          assertTrue(Artifact.dominates(a2,a0));
          assertTrue(Artifact.dominates(a3,a2));
          assertTrue(Artifact.dominates(a4,a3));
          assertTrue(Artifact.dominates(a5,a2));
          assertTrue(Artifact.dominates(a9,a2));
          
          //a0 is onovertroffen
          assertFalse(Artifact.dominates(a0,a0));
          assertFalse(Artifact.dominates(a0,a1));
          assertFalse(Artifact.dominates(a0,a2));
          assertFalse(Artifact.dominates(a0,a3));
          assertFalse(Artifact.dominates(a0,a4));
          assertFalse(Artifact.dominates(a0,a5));
          assertFalse(Artifact.dominates(a0,a6));
          assertFalse(Artifact.dominates(a0,a7));
          assertFalse(Artifact.dominates(a0,a8));
          assertFalse(Artifact.dominates(a0,a9));
          
          //a6 is onovertroffen
          assertFalse(Artifact.dominates(a6,a0));
          assertFalse(Artifact.dominates(a6,a1));
          assertFalse(Artifact.dominates(a6,a2));
          assertFalse(Artifact.dominates(a6,a3));
          assertFalse(Artifact.dominates(a6,a4));
          assertFalse(Artifact.dominates(a6,a5));
          assertFalse(Artifact.dominates(a6,a6));
          assertFalse(Artifact.dominates(a6,a7));
          assertFalse(Artifact.dominates(a6,a8));
          assertFalse(Artifact.dominates(a6,a9));
          
          //a7 is onovertroffen
          assertFalse(Artifact.dominates(a7,a0));
          assertFalse(Artifact.dominates(a7,a1));
          assertFalse(Artifact.dominates(a7,a2));
          assertFalse(Artifact.dominates(a7,a3));
          assertFalse(Artifact.dominates(a7,a4));
          assertFalse(Artifact.dominates(a7,a5));
          assertFalse(Artifact.dominates(a7,a6));
          assertFalse(Artifact.dominates(a7,a7));
          assertFalse(Artifact.dominates(a7,a8));
          assertFalse(Artifact.dominates(a7,a9));
          
          //a8 is onovertroffen
          assertFalse(Artifact.dominates(a8,a0));
          assertFalse(Artifact.dominates(a8,a1));
          assertFalse(Artifact.dominates(a8,a2));
          assertFalse(Artifact.dominates(a8,a3));
          assertFalse(Artifact.dominates(a8,a4));
          assertFalse(Artifact.dominates(a8,a5));
          assertFalse(Artifact.dominates(a8,a6));
          assertFalse(Artifact.dominates(a8,a7));
          assertFalse(Artifact.dominates(a8,a8));
          assertFalse(Artifact.dominates(a8,a9));
          
          //randgevallen
          Artifact a10 = new Artifact(0,0,4);     
          Artifact a11 = new Artifact(1,0.1,4);  
          Artifact a12 = new Artifact(1,-1,4);    
          assertFalse(Artifact.dominates(a10,a11)); //grotere prijs met decimalen
          assertTrue(Artifact.dominates(a10,a12));  //negative prijs
          
          //overflow happy
          Artifact a13 = new Artifact(1,-Double.MAX_VALUE,4);  
          Artifact a14 = new Artifact(1,0,4); 
          Artifact a15 = new Artifact(1,Double.MAX_VALUE,4); 
          assertTrue(Artifact.dominates(a14,a13));
          assertFalse(Artifact.dominates(a14,a15));
          assertTrue(Artifact.dominates(a15,a13));
          
          //kleiner dan -Double.MAX_VALUE kan niet en geeft altijd false
          Artifact a16 = new Artifact(1,-Double.MAX_VALUE-1,4);  
          Artifact a17 = new Artifact(1,Double.MIN_VALUE,4);
          Artifact a18 = new Artifact(1,Double.MIN_VALUE-1,4);  //overflow
          assertFalse(Artifact.dominates(a13,a16)); 
          assertFalse(Artifact.dominates(a13,a17)); 
          assertFalse(Artifact.dominates(a13,a18)); 
          
          Artifact a19 = new Artifact(1,0,Double.MAX_VALUE-1);          //geldige waarde
          Artifact a20 = new Artifact(1,0,Double.MAX_VALUE);            //geldige waarde
          Artifact a21 = new Artifact(1,0,Double.POSITIVE_INFINITY);    //inifity
          assertTrue(Artifact.dominates(a10,a19)); 
          assertTrue(Artifact.dominates(a10,a20)); 
          assertFalse(Artifact.dominates(a10,a21)); 
	    }
	    
	    
	    /**
	     * Test of de comaritor juist is icm een priority queue
	     */
	    @Test
	    public void artifactComparatorPriceValueTest() {
	      
	      Set<Artifact> artifacts = Set.of(
              new Artifact(0,0,6),  //niet overtroffen
              new Artifact(1,1,5),  //overtroffen
              new Artifact(2,1,6),  //overtroffen
              new Artifact(3,2,5),  //overtroffen
              new Artifact(4,3,3),  //overtroffen
              new Artifact(5,3,5),  //overtroffen
              new Artifact(6,5,12), //niet overtroffen
              new Artifact(7,2,7),  //niet overtroffen
              new Artifact(8,8,20), //niet overtroffen
              new Artifact(9,4,4)   //overtroffen
         );
	      
	      PriorityQueue<Artifact> pq = new PriorityQueue<>(Artifact.PRIJS_WAARDE_COMPARATOR);
	      pq.addAll(artifacts);
          
          ArrayList<Artifact> list = new ArrayList<>();
          while (!pq.isEmpty()) {
            list.add(pq.poll());
          }
          
         //Verwacht [(0,0,6), (2,1,6), (1,1,5), (7,2,7), (3,2,5), (5,3,5), (4,3,3), (9,4,4), (6,5,12), (8,8,20)]
	      
	      assertEquals(0, list.get(0).getID());
	      assertEquals(2, list.get(1).getID());
	      assertEquals(1, list.get(2).getID());
	      assertEquals(7, list.get(3).getID());
	      assertEquals(3, list.get(4).getID());
	      assertEquals(5, list.get(5).getID());
	      assertEquals(4, list.get(6).getID());
	      assertEquals(9, list.get(7).getID());
	      assertEquals(6, list.get(8).getID());
	      assertEquals(8, list.get(9).getID());

	    }
	    
	    /**
         * Test of UnbeatedArtifacts in nlog n de onoverwonnnen arifacten geeft
         */
        @Test
        public void getUnbeatedArtifactsTestNLogN() {
          
          Set<Artifact> artifacts = Set.of(
              new Artifact(0,0,6),  //niet overtroffen
              new Artifact(1,1,5),  //overtroffen
              new Artifact(2,1,6),  //overtroffen
              new Artifact(3,2,5),  //overtroffen
              new Artifact(4,3,3),  //overtroffen
              new Artifact(5,3,5),  //overtroffen
              new Artifact(6,5,12), //niet overtroffen
              new Artifact(7,2,7),  //niet overtroffen
              new Artifact(8,8,20), //niet overtroffen
              new Artifact(9,4,4)   //overtroffen
         );
          
          assertEquals(10, artifacts.size());
          
          Set<Artifact> expected = Set.of(
              new Artifact(0,0,6),  //niet overtroffen
              new Artifact(6,5,12), //niet overtroffen
              new Artifact(7,2,7),  //niet overtroffen
              new Artifact(8,8,20)  //niet overtroffen
         );
          
          Set<Artifact> onovertroffen = artifactRetrievalNLogNComplexity.getUnbeatedArtifacts(artifacts);
          
          assertEquals(expected,onovertroffen);

        }
	    
	    

        /**
         * Test of ScoreOrderedArtiacts de gewogen score goed verwerkt en in de juiste volgorde de artifacts sorteert
         */
	    @Test
	    public void getScoreOrderedArtiactsTest() {

          SortedSet<Artifact> sortedset = artifactRetrievalQuadraticComplexity.getScoreOrderedArtiacts(createArtifactsShort(), 3, 2);
          
//          new Artifact(2, 2, 11);  //score 28
//          new Artifact(1, 1, 10);  //score 23
//          new Artifact(0, 0, 9);   //score 18
//          new Artifact(3, 3, 5);   //score 19
//          new Artifact(4, 4, 4);   //score 20
          
          assertEquals(5,sortedset.size());
          
          Artifact eerste = sortedset.first();
          Artifact vijfde = sortedset.last();
          
          assertEquals(5,sortedset.size());
          assertEquals(2.0,eerste.getPrice(), 0.01);
          assertEquals(11.0,eerste.getValue(), 0.01);
          
          assertEquals(0,vijfde.getPrice(), 0.01);
          assertEquals(9.0,vijfde.getValue(), 0.01);
          
          sortedset.remove(eerste);
          sortedset.remove(vijfde);
          assertEquals(3,sortedset.size());
          Artifact tweede = sortedset.first();
          sortedset.remove(tweede);
          Artifact derde = sortedset.first();
          sortedset.remove(derde);
          Artifact vierde = sortedset.first();
          sortedset.remove(vierde);
          assertEquals(0,sortedset.size());
          
          assertEquals(1.0,tweede.getPrice(), 0.1);
          assertEquals(10.0,tweede.getValue(), 0.1);
          
          assertEquals(4.0,derde.getPrice(), 0.1);
          assertEquals(4.0,derde.getValue(), 0.1);
          
          assertEquals(3.0,vierde.getPrice(), 0.1);
          assertEquals(5.0,vierde.getValue(), 0.1);

          //negatieve priceWeight en hoog getal bij valueWeight
          sortedset = artifactRetrievalQuadraticComplexity.getScoreOrderedArtiacts(createArtifactsShort(), -3, Integer.MAX_VALUE);

//        new Artifact(2, 2, 11);  //score 23622320111
//        new Artifact(1, 1, 10);  //score 21474836467
//        new Artifact(0, 0, 9);   //score 19327352823
//        new Artifact(3, 3, 5);   //score 10737418226
//        new Artifact(4, 4, 4);   //score 8589934576
          
          assertEquals(5,sortedset.size());
          eerste = sortedset.first();
          sortedset.remove(eerste);
          tweede = sortedset.first();
          sortedset.remove(tweede);
          vijfde = sortedset.last();
          
          assertEquals(2.0,eerste.getPrice(), 0.1);
          assertEquals(11.0,eerste.getValue(), 0.1);
          
          assertEquals(1.0,tweede.getPrice(), 0.1);
          assertEquals(10.0,tweede.getValue(), 0.1);
          
          assertEquals(4.0,vijfde.getPrice(), 0.1);
          assertEquals(4.0,vijfde.getValue(), 0.1);
          
          
          //positice priceWeight en nagative priceWeight => result mixed positief en negative score
          sortedset = artifactRetrievalQuadraticComplexity.getScoreOrderedArtiacts(createArtifactsShort(), 5, -1);
          
//        new Artifact(2, 2, 11);  //score -1
//        new Artifact(1, 1, 10);  //score -5
//        new Artifact(0, 0, 9);   //score -9
//        new Artifact(3, 3, 5);   //score 10
//        new Artifact(4, 4, 4);   //score 16
          
          eerste = sortedset.first();
          sortedset.remove(eerste);
          tweede = sortedset.first();
          sortedset.remove(tweede);
          vijfde = sortedset.last();
          
          assertEquals(4.0,eerste.getPrice(), 0.1);
          assertEquals(4.0,eerste.getValue(), 0.1);
          
          assertEquals(3.0,tweede.getPrice(), 0.1);
          assertEquals(5.0,tweede.getValue(), 0.1);
          
          assertEquals(0,vijfde.getPrice(), 0.1);
          assertEquals(9.0,vijfde.getValue(), 0.1);
          
	      
	    }
	    
	    
	    
	    
	    
	    
} //class


