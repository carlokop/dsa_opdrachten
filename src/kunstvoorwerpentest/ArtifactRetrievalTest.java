package kunstvoorwerpentest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertIterableEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import kunstvoorwerpen.AbstractArtifactRetrieval;
import kunstvoorwerpen.Artifact;
import kunstvoorwerpen.ArtifactOrdering;
import kunstvoorwerpen.ArtifactRetrievalNLogNComplexity;
import kunstvoorwerpen.ArtifactRetrievalQuadraticComplexity;
import kunstvoorwerpen.RadixArtifact;

/**
 *  Test klasse.
 */
public class ArtifactRetrievalTest {

	    
	    private final ArtifactOrdering artifactRetrievalQuadraticComplexity;
	    private final ArtifactOrdering artifactRetrievalNLogNComplexity;
	 
	 
	    private ArtifactRetrievalTest() {
	    	this.artifactRetrievalQuadraticComplexity= new ArtifactRetrievalQuadraticComplexity();
	    	this.artifactRetrievalNLogNComplexity= new ArtifactRetrievalNLogNComplexity();
	    }

	    private static Set<Artifact> createArtifactsShort(){
	    	String solutionsString = 
	    	      "0,0,9;"
	    	    + "1,1,10;"
	    	    + "2,2,11;"
	    	    + "3,3,5;"
	    	    + "4,4,4";
			Set<Artifact >artifactsShort = Artifact.createArtifactsFromArtifactsString(solutionsString);
			return artifactsShort;			
	    }
	    
	    private static Set<Artifact> createExpectedUnbeatedArtifactsShort(){
	    	Set<Artifact> expectedUnbeatedArtifactsShort = new HashSet<>();
	    	expectedUnbeatedArtifactsShort.add(new Artifact(1, 1, 10));
	    	expectedUnbeatedArtifactsShort.add(new Artifact(2, 2, 11));
	    	expectedUnbeatedArtifactsShort.add(new Artifact(0, 0, 9));
	    	return expectedUnbeatedArtifactsShort;	    	
	    }
	    
	    private static List<Artifact> createExpectedScoreOrderedArtifacts(){	    	
	    	List<Artifact> expectedScoreOrderedAtifacts = new ArrayList<>();
	    	expectedScoreOrderedAtifacts.add(new Artifact(2, 2, 11));
	    	expectedScoreOrderedAtifacts.add(new Artifact(1, 1, 10));
	    	expectedScoreOrderedAtifacts.add(new Artifact(0, 0, 9));
	    	expectedScoreOrderedAtifacts.add(new Artifact(3, 3, 5));
	    	expectedScoreOrderedAtifacts.add(new Artifact(4, 4, 4));
	    	return expectedScoreOrderedAtifacts;
	    	
	    }
	    
	    @BeforeEach
	    public void setup() {
	    }

	    @Test
	    public void testSimpleGetUnbeatedArtifactsQuadraticComplexity() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	Set<Artifact> unbeatedArtifacts = artifactRetrievalQuadraticComplexity.getUnbeatedArtifacts(artifactsShort);
	    	Set<Artifact> expectedUnbeatedArtifacts = createExpectedUnbeatedArtifactsShort();
	    	assertIterableEquals(expectedUnbeatedArtifacts, unbeatedArtifacts);	
	    }
	    
	    @Test
	    public void testSimpleGetUnbeatedArtifactsNLogNComplexity() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	Set<Artifact> unbeatedArtifacts = artifactRetrievalNLogNComplexity.getUnbeatedArtifacts(artifactsShort);
	    	Set<Artifact> expectedUnbeatedArtifacts = createExpectedUnbeatedArtifactsShort();
	    	assertIterableEquals(expectedUnbeatedArtifacts, unbeatedArtifacts);
	    }
	    
	    @Test
	    public void testSimpleGetScoreOrderedArtiacts() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	SortedSet<Artifact> scoreOrderedArtifacts = artifactRetrievalNLogNComplexity.getScoreOrderedArtiacts(artifactsShort, 1, 10);
	    	List<Artifact> expextedScoreOrderedArtifacts = createExpectedScoreOrderedArtifacts();
	    	assertIterableEquals(expextedScoreOrderedArtifacts, scoreOrderedArtifacts);
	    }


	    // Er wordt aanbevolen om meer tests toe te voegen om andere scenario's 
	    // en randgevallen te testen 
	    
	    @Test 
	    public void dominatesTest() {
	      
	      //gewicht == 1
	      Artifact a = new Artifact(1,2,11);
          Artifact b = new Artifact(2,2,10);
          Artifact c = new Artifact(1,3,11);
          
          boolean aa = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(a,a);  //niet overtroffen
          boolean ab = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(a,b);  //niet overtroffen
          boolean ba = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(b,a);  //overtroffen
          boolean ac = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(a,c);  //niet overtroffen
          boolean bc = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(b,c);  //niet overtroffen
          boolean ca = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(c,a);  //overtroffen
          boolean cb = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(c,b);  //niet overtroffen
          
          assertTrue(ba);
          assertTrue(ca);
          
          assertFalse(aa);
          assertFalse(ab);
          assertFalse(ac);
          assertFalse(bc);
          assertFalse(cb);
       
          

	      
	    }
	    
	    
	    @Test
	    public void binarySearchValueSortedArtifactTest() {
	      
	        //reeds gesorteerde lijst op price  [(0, 9), (1, 9), (2, 11), (3, 5), (4, 4)];
    	    ArrayList<Artifact> lijst = new ArrayList<>();
    	    lijst.add(new Artifact(0,0,9));
    	    lijst.add(new Artifact(1,1,9));
            lijst.add(new Artifact(2,2,11));
            lijst.add(new Artifact(3,3,5));
            lijst.add(new Artifact(4,4,4));

	        //value sorted list = [(2, 11), (0, 9), (1, 9), (3, 5), (4, 4)]
	        ArrayList<Artifact> andereList = new ArrayList<>();
	        andereList.add(new Artifact(2,2,11));
	        andereList.add(new Artifact(0,0,9));
	        andereList.add(new Artifact(1,1,9));
	        andereList.add(new Artifact(3,3,5));
	        andereList.add(new Artifact(4,4,4));
            
            assertEquals(5, lijst.size());
            assertEquals(5, andereList.size());
           
            //test of juiste artifact wordt teruggegeven
            for(int i=0; i<lijst.size()-1; i++) {
              Artifact artifact = lijst.get(i);
              int index = ((ArtifactRetrievalNLogNComplexity) artifactRetrievalNLogNComplexity).binarySearchValueSortedArtifact(andereList, 0, andereList.size()-1, artifact);
              assertTrue(index != -1);
              
              Artifact artifactFound = andereList.get(index);
              assertNotNull(artifactFound);
              
              assertEquals(artifactFound.getID(),artifact.getID());
            }
            
            //niet in list
            lijst.add(new Artifact(8,6,0));
            Artifact artifact = lijst.get(5);
            int index = ((ArtifactRetrievalNLogNComplexity) artifactRetrievalNLogNComplexity).binarySearchValueSortedArtifact(andereList, 0, andereList.size()-1, artifact);
            assertEquals(-1, index);
    
	    }

	    
	    @Test
	    public void dominatesPositieOpArrayTest() {
	      /**
	       * In een gesorteerde array op waarde controleren of de gesorteerde array aan de volgende eisen voldoet
	       * 1. Voor een artifact op gegeven index mag er geen enkel artifact zijn dat deze overtreft met een hogere index
	       * 2. Als een artifact overtroffen wordt gebeurd dit bij het artifact op de directe linkerbuur (index -1)
	       * 3. Als een artifact niet door de linkerbuur wordt overtroffen is er geen ander artifact dat hem overtreft 
	       */
	      
          ArrayList<Artifact> andereList = new ArrayList<>();
          andereList.add(new Artifact(2,2,11));
          andereList.add(new Artifact(0,0,9));
          andereList.add(new Artifact(1,1,9));
          andereList.add(new Artifact(3,3,5));
          andereList.add(new Artifact(4,4,4));
          
          //test geen artifact rechts van de array overtreft
          //dit bevestigd ook artifact op positie 0 wordt niet overtroffen
          for(int i=0; i<andereList.size(); i++) {
            Artifact artifact = andereList.get(i);
            
            for(int j=i+1; j<andereList.size(); j++) {
              Artifact other = andereList.get(j);
              boolean dominates = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact,other); 
              assertFalse(dominates);
            }
            
          }
          
          //als het arifact overtroffen wordt gebeurd dat bij het artifact op index -1 van huidige positie
          for(int i=1; i<andereList.size(); i++) {
            Artifact artifact = andereList.get(i);
            Artifact other = andereList.get(i-1);
            
            boolean dominates = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact,other); 
            
            //als artifact niet overtroffen wordt mag dat nergens links van de array index gebeuren
            if(!dominates) {
              for(int j=-2; j>=0; j--) {
                other = andereList.get(j);
                dominates = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact,other);
                assertFalse(dominates);
              }
            }
          }
	    }
	    
	    @Test
	    public void getScoreOrderedArtiactsTest() {

          SortedSet<Artifact> sortedset = artifactRetrievalQuadraticComplexity.getScoreOrderedArtiacts(createArtifactsShort(), 3, 2);
          
//          new Artifact(2, 2, 11);  //score 28
//          new Artifact(1, 1, 10);  //score 23
//          new Artifact(0, 0, 9);   //score 18
//          new Artifact(3, 3, 5);   //score 19
//          new Artifact(4, 4, 4);   //score 20
          
          assertEquals(5,sortedset.size());
          
          Artifact eerste = sortedset.first();
          Artifact vijfde = sortedset.last();
          
          assertEquals(5,sortedset.size());
          assertEquals(2.0,eerste.getPrice(), 0.01);
          assertEquals(11.0,eerste.getValue(), 0.01);
          
          assertEquals(0,vijfde.getPrice(), 0.01);
          assertEquals(9.0,vijfde.getValue(), 0.01);
          
          sortedset.remove(eerste);
          sortedset.remove(vijfde);
          assertEquals(3,sortedset.size());
          Artifact tweede = sortedset.first();
          sortedset.remove(tweede);
          Artifact derde = sortedset.first();
          sortedset.remove(derde);
          Artifact vierde = sortedset.first();
          sortedset.remove(vierde);
          assertEquals(0,sortedset.size());
          
          assertEquals(1.0,tweede.getPrice(), 0.1);
          assertEquals(10.0,tweede.getValue(), 0.1);
          
          assertEquals(4.0,derde.getPrice(), 0.1);
          assertEquals(4.0,derde.getValue(), 0.1);
          
          assertEquals(3.0,vierde.getPrice(), 0.1);
          assertEquals(5.0,vierde.getValue(), 0.1);

          //negatieve priceWeight en hoog getal bij valueWeight
          sortedset = artifactRetrievalQuadraticComplexity.getScoreOrderedArtiacts(createArtifactsShort(), -3, Integer.MAX_VALUE);

//        new Artifact(2, 2, 11);  //score 23622320111
//        new Artifact(1, 1, 10);  //score 21474836467
//        new Artifact(0, 0, 9);   //score 19327352823
//        new Artifact(3, 3, 5);   //score 10737418226
//        new Artifact(4, 4, 4);   //score 8589934576
          
          assertEquals(5,sortedset.size());
          eerste = sortedset.first();
          sortedset.remove(eerste);
          tweede = sortedset.first();
          sortedset.remove(tweede);
          vijfde = sortedset.last();
          
          assertEquals(2.0,eerste.getPrice(), 0.1);
          assertEquals(11.0,eerste.getValue(), 0.1);
          
          assertEquals(1.0,tweede.getPrice(), 0.1);
          assertEquals(10.0,tweede.getValue(), 0.1);
          
          assertEquals(4.0,vijfde.getPrice(), 0.1);
          assertEquals(4.0,vijfde.getValue(), 0.1);
          
          
          //positice priceWeight en nagative priceWeight => result mixed positief en negative score
          sortedset = artifactRetrievalQuadraticComplexity.getScoreOrderedArtiacts(createArtifactsShort(), 5, -1);
          
//        new Artifact(2, 2, 11);  //score -1
//        new Artifact(1, 1, 10);  //score -5
//        new Artifact(0, 0, 9);   //score -9
//        new Artifact(3, 3, 5);   //score 10
//        new Artifact(4, 4, 4);   //score 16
          
          eerste = sortedset.first();
          sortedset.remove(eerste);
          tweede = sortedset.first();
          sortedset.remove(tweede);
          vijfde = sortedset.last();
          
          assertEquals(4.0,eerste.getPrice(), 0.1);
          assertEquals(4.0,eerste.getValue(), 0.1);
          
          assertEquals(3.0,tweede.getPrice(), 0.1);
          assertEquals(5.0,tweede.getValue(), 0.1);
          
          assertEquals(0,vijfde.getPrice(), 0.1);
          assertEquals(9.0,vijfde.getValue(), 0.1);
          
	      
	    }
	    
	    
	    
	    
	    
	    
} //class


