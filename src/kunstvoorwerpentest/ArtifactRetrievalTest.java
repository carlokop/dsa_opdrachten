package kunstvoorwerpentest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertIterableEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import kunstvoorwerpen.AbstractArtifactRetrieval;
import kunstvoorwerpen.Artifact;
import kunstvoorwerpen.ArtifactOrdering;
import kunstvoorwerpen.ArtifactRetrievalNLogNComplexity;
import kunstvoorwerpen.ArtifactRetrievalQuadraticComplexity;

/**
 *  Test klasse.
 */
public class ArtifactRetrievalTest {

	    
	    private final ArtifactOrdering artifactRetrievalQuadraticComplexity;
	    private final ArtifactOrdering artifactRetrievalNLogNComplexity;
	 
	 
	    private ArtifactRetrievalTest() {
	    	this.artifactRetrievalQuadraticComplexity= new ArtifactRetrievalQuadraticComplexity();
	    	this.artifactRetrievalNLogNComplexity= new ArtifactRetrievalNLogNComplexity();
	    }

	    private static Set<Artifact> createArtifactsShort(){
	    	String solutionsString = 
	    	      "0,0,9;"
	    	    + "1,1,10;"
	    	    + "2,2,11;"
	    	    + "3,3,5;"
	    	    + "4,4,4";
			Set<Artifact >artifactsShort = Artifact.createArtifactsFromArtifactsString(solutionsString);
			return artifactsShort;			
	    }
	    
	    private static Set<Artifact> createExpectedUnbeatedArtifactsShort(){
	    	Set<Artifact> expectedUnbeatedArtifactsShort = new HashSet<>();
	    	expectedUnbeatedArtifactsShort.add(new Artifact(1, 1, 10));
	    	expectedUnbeatedArtifactsShort.add(new Artifact(2, 2, 11));
	    	expectedUnbeatedArtifactsShort.add(new Artifact(0, 0, 9));
	    	return expectedUnbeatedArtifactsShort;	    	
	    }
	    
	    private static List<Artifact> createExpectedScoreOrderedArtifacts(){	    	
	    	List<Artifact> expectedScoreOrderedAtifacts = new ArrayList<>();
	    	expectedScoreOrderedAtifacts.add(new Artifact(2, 2, 11));
	    	expectedScoreOrderedAtifacts.add(new Artifact(1, 1, 10));
	    	expectedScoreOrderedAtifacts.add(new Artifact(0, 0, 9));
	    	expectedScoreOrderedAtifacts.add(new Artifact(3, 3, 5));
	    	expectedScoreOrderedAtifacts.add(new Artifact(4, 4, 4));
	    	return expectedScoreOrderedAtifacts;
	    	
	    }
	    
	    @BeforeEach
	    public void setup() {
	    }

	    @Test
	    public void testSimpleGetUnbeatedArtifactsQuadraticComplexity() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	Set<Artifact> unbeatedArtifacts = artifactRetrievalQuadraticComplexity.getUnbeatedArtifacts(artifactsShort);
	    	Set<Artifact> expectedUnbeatedArtifacts = createExpectedUnbeatedArtifactsShort();
	    	assertIterableEquals(expectedUnbeatedArtifacts, unbeatedArtifacts);	
	    }
	    
	    @Test
	    public void testSimpleGetUnbeatedArtifactsNLogNComplexity() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	Set<Artifact> unbeatedArtifacts = artifactRetrievalNLogNComplexity.getUnbeatedArtifacts(artifactsShort);
	    	Set<Artifact> expectedUnbeatedArtifacts = createExpectedUnbeatedArtifactsShort();
	    	//assertIterableEquals(expectedUnbeatedArtifacts, unbeatedArtifacts);
	    }
	    
	    @Test
	    public void testSimpleGetScoreOrderedArtiacts() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	SortedSet<Artifact> scoreOrderedArtifacts = artifactRetrievalNLogNComplexity.getScoreOrderedArtiacts(artifactsShort, 1, 10);
	    	List<Artifact> expextedScoreOrderedArtifacts = createExpectedScoreOrderedArtifacts();
	    	//assertIterableEquals(expextedScoreOrderedArtifacts, scoreOrderedArtifacts);
	    }


	    // Er wordt aanbevolen om meer tests toe te voegen om andere scenario's 
	    // en randgevallen te testen 
	    
	    @Test 
	    public void dominatesTest() {
	      //dit moet anders als WEIGHT_PRICE en WEIGHT_VALUE niet meer uit constante komen
	      Artifact artifact_a = new Artifact(1,1,2);  //score 11
	      Artifact artifact_b = new Artifact(2,2,3);  //score 19
	      
	      assertNotEquals(artifact_a,artifact_b);
	      assertNotNull(artifact_a);
	      
	      //b overtreft a
	      assertTrue(((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact_b,artifact_a));
	      assertFalse(((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact_a,artifact_b));
	      
	      //score a == score b
	      assertTrue(((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact_a,artifact_a));
	      
	      //meer test toevoegen bij negative waardes zodra die ingesteld kunnen worden
	      //check ivm overflow
	      
	    }
	    
	    
	    
	    
}


