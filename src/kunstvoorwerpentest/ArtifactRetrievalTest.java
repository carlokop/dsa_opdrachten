package kunstvoorwerpentest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertIterableEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import datastructures.RadixArtifact;
import kunstvoorwerpen.AbstractArtifactRetrieval;
import kunstvoorwerpen.Artifact;
import kunstvoorwerpen.ArtifactOrdering;
import kunstvoorwerpen.ArtifactRetrievalNLogNComplexity;
import kunstvoorwerpen.ArtifactRetrievalQuadraticComplexity;

/**
 *  Test klasse.
 */
public class ArtifactRetrievalTest {

	    
	    private final ArtifactOrdering artifactRetrievalQuadraticComplexity;
	    private final ArtifactOrdering artifactRetrievalNLogNComplexity;
	 
	 
	    private ArtifactRetrievalTest() {
	    	this.artifactRetrievalQuadraticComplexity= new ArtifactRetrievalQuadraticComplexity();
	    	this.artifactRetrievalNLogNComplexity= new ArtifactRetrievalNLogNComplexity();
	    }

	    private static Set<Artifact> createArtifactsShort(){
	    	String solutionsString = 
	    	      "0,0,9;"
	    	    + "1,1,10;"
	    	    + "2,2,11;"
	    	    + "3,3,5;"
	    	    + "4,4,4";
			Set<Artifact >artifactsShort = Artifact.createArtifactsFromArtifactsString(solutionsString);
			return artifactsShort;			
	    }
	    
	    private static Set<Artifact> createExpectedUnbeatedArtifactsShort(){
	    	Set<Artifact> expectedUnbeatedArtifactsShort = new HashSet<>();
	    	expectedUnbeatedArtifactsShort.add(new Artifact(1, 1, 10));
	    	expectedUnbeatedArtifactsShort.add(new Artifact(2, 2, 11));
	    	expectedUnbeatedArtifactsShort.add(new Artifact(0, 0, 9));
	    	return expectedUnbeatedArtifactsShort;	    	
	    }
	    
	    private static List<Artifact> createExpectedScoreOrderedArtifacts(){	    	
	    	List<Artifact> expectedScoreOrderedAtifacts = new ArrayList<>();
	    	expectedScoreOrderedAtifacts.add(new Artifact(2, 2, 11));
	    	expectedScoreOrderedAtifacts.add(new Artifact(1, 1, 10));
	    	expectedScoreOrderedAtifacts.add(new Artifact(0, 0, 9));
	    	expectedScoreOrderedAtifacts.add(new Artifact(3, 3, 5));
	    	expectedScoreOrderedAtifacts.add(new Artifact(4, 4, 4));
	    	return expectedScoreOrderedAtifacts;
	    	
	    }
	    
	    @BeforeEach
	    public void setup() {
	    }

	    @Test
	    public void testSimpleGetUnbeatedArtifactsQuadraticComplexity() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	Set<Artifact> unbeatedArtifacts = artifactRetrievalQuadraticComplexity.getUnbeatedArtifacts(artifactsShort);
	    	Set<Artifact> expectedUnbeatedArtifacts = createExpectedUnbeatedArtifactsShort();
	    	assertIterableEquals(expectedUnbeatedArtifacts, unbeatedArtifacts);	
	    }
	    
	    @Test
	    public void testSimpleGetUnbeatedArtifactsNLogNComplexity() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	Set<Artifact> unbeatedArtifacts = artifactRetrievalNLogNComplexity.getUnbeatedArtifacts(artifactsShort);
	    	Set<Artifact> expectedUnbeatedArtifacts = createExpectedUnbeatedArtifactsShort();
	    	assertIterableEquals(expectedUnbeatedArtifacts, unbeatedArtifacts);
	    }
	    
	    @Test
	    public void testSimpleGetScoreOrderedArtiacts() {
	    	Set<Artifact> artifactsShort = createArtifactsShort();
	    	SortedSet<Artifact> scoreOrderedArtifacts = artifactRetrievalNLogNComplexity.getScoreOrderedArtiacts(artifactsShort, 1, 10);
	    	List<Artifact> expextedScoreOrderedArtifacts = createExpectedScoreOrderedArtifacts();
	    	//assertIterableEquals(expextedScoreOrderedArtifacts, scoreOrderedArtifacts);
	    }


	    // Er wordt aanbevolen om meer tests toe te voegen om andere scenario's 
	    // en randgevallen te testen 
	    
	    @Test 
	    public void dominatesTest() {
	      //dit moet anders als WEIGHT_PRICE en WEIGHT_VALUE niet meer uit constante komen
	      Artifact artifact_a = new Artifact(1,1,2);  //score 11
	      Artifact artifact_b = new Artifact(2,2,3);  //score 19
	      
	      assertNotEquals(artifact_a,artifact_b);
	      assertNotNull(artifact_a);
	      
	      //b overtreft a
	      assertTrue(((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact_b,artifact_a));
	      assertFalse(((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact_a,artifact_b));
	      
	      //score a == score b
	      assertTrue(((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).dominates(artifact_a,artifact_a));
	      
	      //meer test toevoegen bij negative waardes zodra die ingesteld kunnen worden
	      //check ivm overflow
	      
	    }
	    
	    @Test
	    public void radixSortTest() {
	      
	        //ongesorteerde lijst
	        ArrayList<Artifact> lijst = new ArrayList<>();
	        lijst.add(new Artifact(4,4,4));
	        lijst.add(new Artifact(2,2,11));
	        lijst.add(new Artifact(0,0,9));
	        lijst.add(new Artifact(1,1,9));
	        lijst.add(new Artifact(3,3,5));
	        
	        
	        Artifact a0 = lijst.get(0);
	        Artifact a1 = lijst.get(1);
	        Artifact a2 = lijst.get(2);
            Artifact a3 = lijst.get(3);
            Artifact a4 = lijst.get(4);
	        
            //ongesorteerd
            assertTrue(4.0 == a0.getPrice());
            assertTrue(4.0 == a0.getValue());
            
	        assertTrue(2.0 == a1.getPrice());
	        assertTrue(11.0 == a1.getValue());
	        
	        assertTrue(0.0 == a2.getPrice());
	        assertTrue(9.0 == a2.getValue());
	        
	        assertTrue(1.0 == a3.getPrice());
	        assertTrue(9.0 == a3.getValue());
	            
	        assertTrue(3.0 == a4.getPrice());
	        assertTrue(5.0 == a4.getValue());
	        
	        //sort list op basis van prijs eerst en waarde prijs laag hoog en dan waarde hoog laag
	        RadixArtifact.radixSort(lijst, true, true);
	        RadixArtifact.radixSort(lijst, false, false); 
	        
	        //verwacht  [(0, 9), (1, 9), (2, 11), (3, 5), (4, 4)];
	        a0 = lijst.get(0);
	        a1 = lijst.get(1);
	        a2 = lijst.get(2);
            a3 = lijst.get(3);
            a4 = lijst.get(4);
            
            assertTrue(0 == a0.getPrice());
            assertTrue(9.0 == a0.getValue());
            
            assertTrue(1.0 == a1.getPrice());
            assertTrue(9.0 == a1.getValue());
            
            assertTrue(2.0 == a2.getPrice());
            assertTrue(11.0 == a2.getValue());
            
            assertTrue(3.0 == a3.getPrice());
            assertTrue(5.0 == a3.getValue());
                
            assertTrue(4.0 == a4.getPrice());
            assertTrue(4.0 == a4.getValue());
            
            //sorteer de lijst op basis van value en dan prijs waarde hoog laag en dan prijs laag hoog
            RadixArtifact.radixSort(lijst, false, false); 
            RadixArtifact.radixSort(lijst, true, true);
            
            //verwacht [(2, 11), (0, 9), (1, 9), (3, 5), (4, 4)]
            a0 = lijst.get(0);
            a1 = lijst.get(1);
            a2 = lijst.get(2);
            a3 = lijst.get(3);
            a4 = lijst.get(4);
            
            assertTrue(2.0 == a0.getPrice());
            assertTrue(11.0 == a0.getValue());
            
            assertTrue(0 == a1.getPrice());
            assertTrue(9.0 == a1.getValue());
            
            assertTrue(1.0 == a2.getPrice());
            assertTrue(9.0 == a2.getValue());
            
            assertTrue(3.0 == a3.getPrice());
            assertTrue(5.0 == a3.getValue());
                
            assertTrue(4.0 == a4.getPrice());
            assertTrue(4.0 == a4.getValue());
            
	    }
	    
	    @Test
	    public void binarySearchValueSortedArtifactTest() {
	      
	        //reeds gesorteerde lijst op price  [(0, 9), (1, 9), (2, 11), (3, 5), (4, 4)];
    	    ArrayList<Artifact> lijst = new ArrayList<>();
    	    lijst.add(new Artifact(0,0,9));
    	    lijst.add(new Artifact(1,1,9));
            lijst.add(new Artifact(2,2,11));
            lijst.add(new Artifact(3,3,5));
            lijst.add(new Artifact(4,4,4));

	        //value sorted list = [(2, 11), (0, 9), (1, 9), (3, 5), (4, 4)]
	        ArrayList<Artifact> andereList = new ArrayList<>();
	        andereList.add(new Artifact(2,2,11));
	        andereList.add(new Artifact(0,0,9));
	        andereList.add(new Artifact(1,1,9));
	        andereList.add(new Artifact(3,3,5));
	        andereList.add(new Artifact(4,4,4));
            
            assertEquals(5, lijst.size());
            assertEquals(5, andereList.size());
           
            //test of juiste artifact wordt teruggegeven
            for(int i=0; i<lijst.size()-1; i++) {
              Artifact artifact = lijst.get(i);
              int index = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).binarySearchValueSortedArtifact(andereList, 0, andereList.size()-1, artifact);
              assertTrue(index != -1);
              
              Artifact artifactFound = andereList.get(index);
              assertNotNull(artifactFound);
              
              assertEquals(artifactFound.getID(),artifact.getID());
            }
            
            //niet in list
            lijst.add(new Artifact(8,6,0));
            Artifact artifact = lijst.get(5);
            int index = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).binarySearchValueSortedArtifact(andereList, 0, andereList.size()-1, artifact);
            assertEquals(-1, index);
    
	    }
	    
	    @Test
	    public void overtroffenTest() {
	        
	        Artifact a = new Artifact(1,2,11);
	        Artifact b = new Artifact(2,2,10);
	        Artifact c = new Artifact(1,3,11);
	        
	        boolean aa = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(a,a);  //niet overtroffen
	        boolean ab = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(a,b);  //niet overtroffen
	        boolean ba = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(b,a);  //overtroffen
	        boolean ac = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(a,c);  //niet overtroffen
	        boolean bc = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(b,c);  //niet overtroffen
	        boolean ca = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(c,a);  //overtroffen
	        boolean cb = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(c,b);  //niet overtroffen
	        
	        assertTrue(ba);
	        assertTrue(ca);
	        
	        assertFalse(aa);
	        assertFalse(ab);
	        assertFalse(ac);
	        assertFalse(bc);
	        assertFalse(cb);
	     
	    }
	    
	    @Test
	    public void overtroffenPositieOpArrayTest() {
	      /**
	       * In een gesorteerde array op waarde controleren of de gesorteerde array aan de volgende eisen voldoet
	       * 1. Voor een artifact op gegeven index mag er geen enkel artifact zijn dat deze overtreft met een hogere index
	       * 2. Als een artifact overtroffen wordt gebeurd dit bij het artifact op de directe linkerbuur (index -1)
	       * 3. Als een artifact niet door de linkerbuur wordt overtroffen is er geen ander artifact dat hem overtreft 
	       */
	      
          ArrayList<Artifact> andereList = new ArrayList<>();
          andereList.add(new Artifact(2,2,11));
          andereList.add(new Artifact(0,0,9));
          andereList.add(new Artifact(1,1,9));
          andereList.add(new Artifact(3,3,5));
          andereList.add(new Artifact(4,4,4));
          
          //test geen artifact rechts van de array overtreft
          //dit bevestigd ook artifact op positie 0 wordt niet overtroffen
          for(int i=0; i<andereList.size(); i++) {
            Artifact artifact = andereList.get(i);
            
            for(int j=i+1; j<andereList.size(); j++) {
              Artifact other = andereList.get(j);
              boolean overtroffen = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(artifact,other);  
              assertFalse(overtroffen);
            }
            
          }
          
          //als het arifact overtroffen wordt gebeurd dat bij het artifact op index -1 van huidige positie
          for(int i=1; i<andereList.size(); i++) {
            Artifact artifact = andereList.get(i);
            Artifact other = andereList.get(i-1);
            
            boolean overtroffen = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(artifact,other);  
            
            //als artifact niet overtroffen wordt mag dat nergens links van de array index gebeuren
            if(!overtroffen) {
              for(int j=-2; j>=0; j--) {
                other = andereList.get(j);
                overtroffen = ((AbstractArtifactRetrieval) artifactRetrievalNLogNComplexity).overtroffen(artifact,other);
                assertFalse(overtroffen);
              }
            }
          }
	    }
	    

	    
	    
	    
	    
} //class


